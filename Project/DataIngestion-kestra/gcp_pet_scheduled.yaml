id: gcp_pet_scheduled
namespace: zoomcamp-project

variables:
  file: "seattle_pet_licenses_{{ now() | date('MM-YY') }}.parquet"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.seattle_pet_licenses_{{ now() | date('MM-YY') }}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "SeattlePetLicenses"
      time: "{{ now() }}"

  - id: extract_and_convert
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: ghcr.io/kestra-io/pydata:latest
    outputFiles:
      - "seattle_pet_licenses.parquet"
    script: |
      import pandas as pd
      import requests

      # Base API URL
      base_url = "https://data.seattle.gov/resource/jguv-t9rb.json"

      # Pagination variables
      limit = 1000  # Max rows per request
      offset = 0
      all_data = []

      # Fetch data using pagination
      while True:
          response = requests.get(f"{base_url}?$limit={limit}&$offset={offset}")
          data = response.json()

          # If no more data, break loop
          if not data:
              break

          # Append to the main dataset
          all_data.extend(data)
          offset += limit  # Move to next batch

      # Convert JSON data to DataFrame
      df = pd.DataFrame(all_data)

      # Rename columns according to the correct mapping
      column_mapping = {
          "license_issue_date": "License Issue Date",
          "license_number": "License Number",
          "animal_s_name": "Animal's Name",
          "species": "Species",
          "primary_breed": "Primary Breed",
          "secondary_breed": "Secondary Breed",
          "zip_code": "ZIP Code"
      }
      df = df.rename(columns=column_mapping)

      # Convert License Issue Date to datetime with error handling
      df["License Issue Date"] = pd.to_datetime(df["License Issue Date"], errors="coerce")

      # Extract day, month, year as strings
      df["year"] = df["License Issue Date"].dt.year.astype(str)
      df["month"] = df["License Issue Date"].dt.month.astype(str)
      df["day"] = df["License Issue Date"].dt.day.astype(str)

      # Drop the original License Issue Date before saving
      df.drop(columns=["License Issue Date"], inplace=True)

      # Save the DataFrame as Parquet with day, month, and year as separate columns
      df.to_parquet("seattle_pet_licenses.parquet", index=False, engine="pyarrow")


  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs.extract_and_convert.outputFiles['seattle_pet_licenses.parquet'] }}"
    to: "{{render(vars.gcs_file)}}"

  - id: bq_pet_licenses
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.pet_licensesdata`
          (
              update_time TIMESTAMP OPTIONS (description = 'The date and time when the database updated'),
              filename STRING OPTIONS (description = 'The source filename from which the data was loaded'),
              year STRING OPTIONS (description = 'Year of the license issue date'),
              month STRING OPTIONS (description = 'Month of the license issue date'),
              day STRING OPTIONS (description = 'Day of the license issue date'),
              license_number STRING OPTIONS (description = 'Pet\'s license number'),
              animal_s_name STRING OPTIONS (description = 'Pet\'s name'),
              species STRING OPTIONS (description = 'Pet\'s species'),
              primary_breed STRING OPTIONS (description = 'Pet\'s primary breed'),
              secondary_breed STRING OPTIONS (description = 'Pet\'s secondary breed'),
              zip_code STRING OPTIONS (description = 'Pet\'s location zip code')
          );

  - id: bq_yellow_table_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
          (
              year STRING,
              month STRING,
              day STRING,
              license_number STRING,
              animal_s_name STRING,
              species STRING,
              primary_breed STRING,
              secondary_breed STRING,
              zip_code STRING
          )
          OPTIONS (
              format = 'Parquet',
              uris = ['{{render(vars.gcs_file)}}']
          );

  - id: bq_yellow_table_tmp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            CURRENT_TIMESTAMP() AS update_time,
            "seattle_pet_licenses_{{ now() | date('MM-YY') }}.parquet" AS filename,
            *,
            DATE(PARSE_DATE('%Y-%m-%d', CONCAT(year, '-', month, '-', day))) AS license_issue_date
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_yellow_replace
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          DROP TABLE IF EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.pet_licensesdata`;

          CREATE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.pet_licensesdata`
          PARTITION BY license_issue_date
          AS
          SELECT
            update_time,
            filename,
            year,
            month,
            day,
            license_number,
            animal_s_name,
            species,
            primary_breed,
            secondary_breed,
            zip_code,
            DATE(PARSE_DATE('%Y-%m-%d', CONCAT(year, '-', month, '-', day))) AS license_issue_date
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`;

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: Clean up storage by removing temporary files

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: pet_licenses_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 2 10 * *"
